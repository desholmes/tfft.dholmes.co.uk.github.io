{"mappings":"MAEMA,EACJC,GAAO,GAEPC,GAEAC,eAEYC,EAAc,IACxB,MAAOC,YAACA,EAAc,iBAAgBF,WAAEA,GAAeC,EAEjDF,EAAcI,SAASC,eAAeF,GAE5C,IAAKH,EACH,MAAMM,MAAK,cAAeH,qBAG5BI,MAAKP,EAAeA,EACpBO,MAAKN,EAAc,IAAIO,KACrBP,EAAWQ,KACXR,EAAWS,MACXT,EAAWU,MACXC,UAEFL,MAAKM,IAGPA,KACEN,MAAKO,IACLP,MAAKQ,IACLR,MAAKS,IAGPF,KACEP,MAAKR,EAAO,CACVkB,KAAMV,MAAKP,EAAakB,cAAc,SACtCC,UAAWZ,MAAKP,EAAakB,cAAc,gBAC3CE,MAAOb,MAAKP,EAAakB,cAAc,UACvCG,WAAYd,MAAKP,EAAakB,cAAc,iBAC5CI,QAASf,MAAKP,EAAakB,cAAc,YACzCK,aAAchB,MAAKP,EAAakB,cAAc,mBAC9CM,QAASjB,MAAKP,EAAakB,cAAc,YACzCO,aAAclB,MAAKP,EAAakB,cAAc,oBAIlDF,KACE,MAAMU,GAAQ,IAAIlB,MAAOI,UACnBe,EAAOpB,MAAKN,EAAcyB,EAE1BT,EAAOW,KAAKC,MAAMF,EAAQ,OAC1BP,EAAQQ,KAAKC,MAAOF,EAAQ,MAAyB,MACrDL,EAAUM,KAAKC,MAAOF,EAAQ,KAAoB,KAClDH,EAAUI,KAAKC,MAAOF,EAAQ,IAAc,KAE5CG,EAAK,MAASF,KAAKC,MAAOZ,EAAO,GAAM,OACvCc,EAAM,MAASH,KAAKC,MAAOT,EAAQ,GAAM,OACzCY,EAAS,MAASJ,KAAKC,MAAOP,EAAU,GAAM,OAC9CW,EAAS,MAASL,KAAKC,MAAOL,EAAU,GAAM,OAGpDjB,MAAKR,EAAKkB,KAAKiB,UAAUC,OAAO5B,MAAKR,EAAKuB,QAAQY,UAAU,IAC5D3B,MAAKR,EAAKkB,KAAKiB,UAAUE,IAAIN,GAC7BvB,MAAKR,EAAKoB,UAAUkB,UAAYpB,EAEhCV,MAAKR,EAAKqB,MAAMc,UAAUC,OAAO5B,MAAKR,EAAKuB,QAAQY,UAAU,IAC7D3B,MAAKR,EAAKqB,MAAMc,UAAUE,IAAIL,GAC9BxB,MAAKR,EAAKsB,WAAWgB,UAAYjB,EAEjCb,MAAKR,EAAKuB,QAAQY,UAAUC,OAAO5B,MAAKR,EAAKuB,QAAQY,UAAU,IAC/D3B,MAAKR,EAAKuB,QAAQY,UAAUE,IAAIJ,GAChCzB,MAAKR,EAAKwB,aAAac,UAAYf,EAEnCf,MAAKR,EAAKyB,QAAQU,UAAUC,OAAO5B,MAAKR,EAAKyB,QAAQU,UAAU,IAC/D3B,MAAKR,EAAKyB,QAAQU,UAAUE,IAAIH,GAChC1B,MAAKR,EAAK0B,aAAaY,UAAYb,EAGrCT,KACEuB,aAAW,KACT/B,MAAKS,MACJ,MAIHuB,SACFA,OAAOC,cAAgB1C,OAGzB2C,EAAe3C,ECxFf,MAAM4C,EAAS,CACbvC,YAAa,iBACbF,WAAY,CAAEU,KAAM,GAAID,MAAO,GAAID,KAAM,OAGrCkC,EAAI,KAER,IAAIF,EAAcC,IAIM,aAAxBtC,SAASwC,YACgB,YAAxBxC,SAASwC,aAA6BxC,SAASyC,gBAAgBC,SAEhEH,IAEAvC,SAAS2C,iBAAiB,mBAAoBJ","sources":["src/modules/tfftCountdown.js","src/main.js"],"sourcesContent":["import \"./tfffCountdown.scss\";\n\nclass TfftCountdown {\n  #dom = {};\n\n  #containerEl;\n\n  #targetDate;\n\n  constructor(configProps = {}) {\n    const { containerId = \"tfft-countdown\", targetDate } = configProps;\n\n    const containerEl = document.getElementById(containerId);\n\n    if (!containerEl) {\n      throw Error(`Container #${containerId} does not exist!`);\n    }\n\n    this.#containerEl = containerEl;\n    this.#targetDate = new Date(\n      targetDate.year,\n      targetDate.month,\n      targetDate.date\n    ).getTime();\n\n    this.#setUp();\n  }\n\n  #setUp() {\n    this.#createDom();\n    this.#setTimer();\n    this.#updateClock();\n  }\n\n  #createDom() {\n    this.#dom = {\n      days: this.#containerEl.querySelector(\".days\"),\n      daysDigit: this.#containerEl.querySelector(\".days .digit\"),\n      hours: this.#containerEl.querySelector(\".hours\"),\n      hoursDigit: this.#containerEl.querySelector(\".hours .digit\"),\n      minutes: this.#containerEl.querySelector(\".minutes\"),\n      minutesDigit: this.#containerEl.querySelector(\".minutes .digit\"),\n      seconds: this.#containerEl.querySelector(\".seconds\"),\n      secondsDigit: this.#containerEl.querySelector(\".seconds .digit\"),\n    };\n  }\n\n  #updateClock() {\n    const today = new Date().getTime();\n    const diff = this.#targetDate - today;\n\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n\n    const dayBg = `bg-${Math.floor((days / 30) * 100)}`;\n    const hourBg = `bg-${Math.floor((hours / 24) * 100)}`;\n    const minutesBg = `bg-${Math.floor((minutes / 60) * 100)}`;\n    const secondsBg = `bg-${Math.floor((seconds / 60) * 100)}`;\n\n    // Update days\n    this.#dom.days.classList.remove(this.#dom.minutes.classList[2]);\n    this.#dom.days.classList.add(dayBg);\n    this.#dom.daysDigit.innerHTML = days;\n    // Update hours\n    this.#dom.hours.classList.remove(this.#dom.minutes.classList[2]);\n    this.#dom.hours.classList.add(hourBg);\n    this.#dom.hoursDigit.innerHTML = hours;\n    // Update minutes\n    this.#dom.minutes.classList.remove(this.#dom.minutes.classList[2]);\n    this.#dom.minutes.classList.add(minutesBg);\n    this.#dom.minutesDigit.innerHTML = minutes;\n    // Update seconds\n    this.#dom.seconds.classList.remove(this.#dom.seconds.classList[2]);\n    this.#dom.seconds.classList.add(secondsBg);\n    this.#dom.secondsDigit.innerHTML = seconds;\n  }\n\n  #setTimer() {\n    setInterval(() => {\n      this.#updateClock();\n    }, 1000);\n  }\n}\n\nif (window) {\n  window.TfftCountdown = TfftCountdown;\n}\n\nexport default TfftCountdown;\n","import TfftCountdown from \"./modules/tfftCountdown\";\n\nconst config = {\n  containerId: \"tfft-countdown\",\n  targetDate: { date: 23, month: 11, year: 2021 },\n};\n\nconst init = () => {\n  // eslint-disable-next-line no-new\n  new TfftCountdown(config);\n};\n\nif (\n  document.readyState === \"complete\" ||\n  (document.readyState !== \"loading\" && !document.documentElement.doScroll)\n) {\n  init();\n} else {\n  document.addEventListener(\"DOMContentLoaded\", init);\n}\n"],"names":["$508669b24556b881$var$TfftCountdown","dom","containerEl","targetDate","configProps","containerId","document","getElementById","Error","this","Date","year","month","date","getTime","setUp","createDom","setTimer","updateClock","days","querySelector","daysDigit","hours","hoursDigit","minutes","minutesDigit","seconds","secondsDigit","today","diff","Math","floor","dayBg","hourBg","minutesBg","secondsBg","classList","remove","add","innerHTML","setInterval","window","TfftCountdown","$508669b24556b881$export$2e2bcd8739ae039","$f5bd4908aadff81f$var$config","$f5bd4908aadff81f$var$init","readyState","documentElement","doScroll","addEventListener"],"version":3,"file":"index.a60f567c.js.map"}